fs hlbGit() {
	git "https://github.com/openllb/hlb.git" "41d11fccf427dea498b9c3f697471746d4da936b"
}

fs npmInstall(fs manifest) {
	image "node:alpine"
	run "npm install" with option {
		dir "/src"
		mount manifest "/src"
		mount fs { scratch; } "/src/node_modules" as nodeModules
	}
}

fs goBuild(fs context, string package, string binary) {
	image "golang:1.12-alpine"
	run "apk add -U git gcc libc-dev"
	run string {
		format "go build -o /out/%s -ldflags '-linkmode external -extldflags -static' -a %s" binary package
	} with option {
        	env "GO111MODULE" "on"
		dir "/src"
		mount context "/src"
		mount fs { scratch; } "/out" as goBinary
        	mount fs { scratch; } "/root/.cache/go-build" with option {
			cache "@hlb-docs/go-build" "shared"
        	}
        	mount fs { scratch; } "/go/pkg/mod" with option {
			cache "@hlb-docs/go-mod" "shared"
		}
	}
}

fs docgen() {
	scratch
	mkdir "/out" 0600
	run "/docgen" "reference.hlb" "/out/reference.json" with option {
		mount fs { goBinary hlbGit "./cmd/docgen" "docgen"; } "/"
		mount hlbGit "/reference.hlb" with option {
			sourcePath "/docs/reference.hlb"
		}
		mount fs { scratch; } "/out" as json
	}
}

fs handleBars(fs context, fs manifest) {
	image "node:alpine"
	run "npm run compile" with option {
		dir "src"
		mount context "/src"
		mount fs { nodeModules manifest; } "/src/node_modules"
		mount json "/src/data"
		mount fs { scratch; } "/src/dist" as markdown
	}
}

fs context() {
	local "." with option {
		excludePatterns "package.json" "package-lock.json" "node_modules" "hlb"
	}
}

fs manifest() {
	local "." with option {
		includePatterns "package.json" "package-lock.json"
	}
}

fs default() {
	markdown context manifest
}
